<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>算法练习题</title>
    <url>/2022/01/25/hello-world/</url>
    <content><![CDATA[<h2 id="算法练习题"><a href="#算法练习题" class="headerlink" title="算法练习题"></a>算法练习题</h2><h3 id="1-给定一个-n-个元素有序的（升序）整型数组-nums-和一个目标值-target-，写一个函数搜索-nums-中的-target，如果目标值存在返回下标，否则返回-1。"><a href="#1-给定一个-n-个元素有序的（升序）整型数组-nums-和一个目标值-target-，写一个函数搜索-nums-中的-target，如果目标值存在返回下标，否则返回-1。" class="headerlink" title="1.给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。"></a>1.给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</h3><p>示例 1 :</p>
<pre><code>输入: nums = [-1, 0, 3, 5, 9, 12], target = 9
输出 : 4
解释 : 9 出现在 nums 中并且下标为 4
</code></pre>
<p>示例 2 :</p>
<pre><code>输入 : nums = [-1, 0, 3, 5, 9, 12], target = 2
输出 : -1
解释 : 2 不存在 nums 中因此返回 - 1
</code></pre>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int pivotIndex(int* nums, int numsSize) &#123;</span><br><span class="line">    int total = 0;</span><br><span class="line">    <span class="keyword">for</span> (int i = 0; i &lt; numsSize; ++i) &#123;</span><br><span class="line">        total += nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    int sum = 0;</span><br><span class="line">    <span class="keyword">for</span> (int i = 0; i &lt; numsSize; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (2 * sum + nums[i] == total) &#123;</span><br><span class="line">            <span class="built_in">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        sum += nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-给你一个有序数组-nums-，请你-原地-删除重复出现的元素，使每个元素-只出现一次-，返回删除后数组的新长度。不要使用额外的数组空间，你必须在-原地-修改输入数组-并在使用-O-1-额外空间的条件下完成。"><a href="#2-给你一个有序数组-nums-，请你-原地-删除重复出现的元素，使每个元素-只出现一次-，返回删除后数组的新长度。不要使用额外的数组空间，你必须在-原地-修改输入数组-并在使用-O-1-额外空间的条件下完成。" class="headerlink" title="2.给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。"></a>2.给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int removeDuplicates(int* nums, int numsSize) &#123;</span><br><span class="line">    <span class="keyword">if</span> (numsSize == 0) &#123;</span><br><span class="line">        <span class="built_in">return</span> 0;</span><br><span class="line">    &#125;</span><br><span class="line">    int fast = 1, slow = 1;</span><br><span class="line">    <span class="keyword">while</span> (fast &lt; numsSize) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[fast] != nums[fast - 1]) &#123;</span><br><span class="line">            nums[slow] = nums[fast];</span><br><span class="line">            ++slow;</span><br><span class="line">        &#125;</span><br><span class="line">        ++fast;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="built_in">return</span> slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>更快的解法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int removeDuplicates(int* nums, int numsSize) &#123;</span><br><span class="line">    int j = numsSize;</span><br><span class="line">    <span class="keyword">if</span> (j &gt; 1) &#123;</span><br><span class="line">        j = 1;</span><br><span class="line">        <span class="keyword">for</span> (int i = 1; i &lt; numsSize; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == nums[i - 1]) &#123;</span><br><span class="line">                <span class="built_in">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                nums[j] = nums[i];</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="3-给定一个数组-prices-，其中-prices-i-是一支给定股票第-i-天的价格。设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。"><a href="#3-给定一个数组-prices-，其中-prices-i-是一支给定股票第-i-天的价格。设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。" class="headerlink" title="3.给定一个数组 prices ，其中 prices[i] 是一支给定股票第 i 天的价格。设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。"></a>3.给定一个数组 prices ，其中 prices[i] 是一支给定股票第 i 天的价格。设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</h3><p>示例 1:</p>
<pre><code>输入: prices = [7,1,5,3,6,4]
输出: 7
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 
这笔交易所能获得利润 = 5-1 = 4 。
</code></pre>
<p>    随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出,<br>    这笔交易所能获得利润 = 6-3 = 3 。</p>
<p>示例 2:</p>
<pre><code>输入: prices = [1,2,3,4,5]
输出: 4
解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 
这笔交易所能获得利润 = 5-1 = 4 。
</code></pre>
<p>    注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。因为这样属于同时参与<br>    了多笔交易，你必须在再次购买前出售掉之前的股票。</p>
<p>示例 3:</p>
<pre><code>输入: prices = [7,6,4,3,1]
输出: 0
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。
</code></pre>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int maxProfit(int* prices, int pricesSize) &#123;</span><br><span class="line">    int ans = 0;</span><br><span class="line">    <span class="keyword">for</span> (int i = 1; i &lt; pricesSize; ++i) &#123;</span><br><span class="line">        ans += fmax(0, prices[i] - prices[i - 1]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="4-给你一个数组，将数组中的元素向右轮转-k-个位置，其中-k-是非负数。"><a href="#4-给你一个数组，将数组中的元素向右轮转-k-个位置，其中-k-是非负数。" class="headerlink" title="4.给你一个数组，将数组中的元素向右轮转 k 个位置，其中 k 是非负数。"></a>4.给你一个数组，将数组中的元素向右轮转 k 个位置，其中 k 是非负数。</h3><p>示例 1:</p>
<pre><code>输入: nums = [1,2,3,4,5,6,7], k = 3
输出: [5,6,7,1,2,3,4]
解释:
向右轮转 1 步: [7,1,2,3,4,5,6]
向右轮转 2 步: [6,7,1,2,3,4,5]
向右轮转 3 步: [5,6,7,1,2,3,4]
</code></pre>
<p>示例 2:</p>
<pre><code>输入：nums = [-1,-100,3,99], k = 2
输出：[3,99,-1,-100]
解释: 
向右轮转 1 步: [99,-1,-100,3]
向右轮转 2 步: [3,99,-1,-100]
</code></pre>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">void rotate(int* nums, int numsSize, int k) &#123;</span><br><span class="line">    int newArr[numsSize];</span><br><span class="line">    <span class="keyword">for</span> (int i = 0; i &lt; numsSize; ++i) &#123;</span><br><span class="line">        newArr[(i + k) % numsSize] = nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (int i = 0; i &lt; numsSize; ++i) &#123;</span><br><span class="line">        nums[i] = newArr[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="wait-update"><a href="#wait-update" class="headerlink" title="wait update"></a>wait update</h3>]]></content>
      <categories>
        <category>算法题</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
</search>
